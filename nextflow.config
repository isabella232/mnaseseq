/*
 * -------------------------------------------------
 *  nf-core/mnaseseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Options: Generic
  singleEnd = false
  seq_center = false
  fragment_size = 150
  fingerprint_bins = 500000

  // Options: References
  genome = false
  tss_bed = false
  saveGenomeIndex = false

  // Options: Trimming
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  skipTrimming = false
  saveTrimmed = false

  // Options: Alignments
  min_insert = 100
  max_insert = 200
  max_mismatch = 4
  keepDups = false
  keepMultiMap = false
  saveAlignedIntermediates = false

  // Options: QC
  skipFastQC = false
  skipPicardMetrics = false
  skipPreseq = false
  skipPlotProfile = false
  skipPlotFingerprint = false
  skipDANPOS = false
  skipIGV = false
  skipMultiQC = false
  skipMultiQCStats = false

  // Options: Other
  outdir = './results'
  igenomes_base = "./iGenomes"
  email = false
  plaintext_email = false
  monochrome_logs = false
  name = false
  maxMultiqcEmailFileSize = 25.MB

  // Options: AWSBatch
  awsqueue = false
  awsregion = 'eu-west-1'

  // Options: Config
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  bamtools_filter_pe_config = "$baseDir/assets/bamtools_filter_pe.json"
  bamtools_filter_se_config = "$baseDir/assets/bamtools_filter_se.json"

  // Options: Custom config
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Options: Default
  help = false
  hostnames = false
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  igenomesIgnore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/mnaseseq:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}

// Increase time available to build conda environment
conda {
    createTimeout = "60 min"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/mnaseseq'
  author = 'Harshil Patel'
  homePage = 'https://github.com/nf-core/mnaseseq'
  description = 'MNase-seq analysis pipeline using BWA and DANPOS2.'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
